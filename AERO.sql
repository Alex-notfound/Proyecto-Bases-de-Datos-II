

/*DROP INDEX IDX_DATOS_EMPLEADO;
DROP INDEX IDX_DATOS_VUELO;
DROP INDEX IDX_TRIPULANTES;*/

DROP TABLE PERSONA CASCADE CONSTRAINTS;
DROP TABLE CLIENTE CASCADE CONSTRAINTS;
DROP TABLE EMPLEADO CASCADE CONSTRAINTS;
DROP TABLE TRIPULANTE CASCADE CONSTRAINTS;
DROP TABLE CABINAMANDO CASCADE CONSTRAINTS;
DROP TABLE CABINAPASAJERO CASCADE CONSTRAINTS;
DROP TABLE AZAFATA CASCADE CONSTRAINTS;
DROP TABLE SOBRECARGO CASCADE CONSTRAINTS;
DROP TABLE BILLETE CASCADE CONSTRAINTS;
DROP TABLE EQUIPAJE CASCADE CONSTRAINTS;
DROP TABLE PISTA CASCADE CONSTRAINTS;
DROP TABLE RECORRIDO CASCADE CONSTRAINTS;
DROP TABLE AVION CASCADE CONSTRAINTS;
DROP TABLE PUERTAEMBARQUE CASCADE CONSTRAINTS;
DROP TABLE TRANSPORTE CASCADE CONSTRAINTS;
DROP TABLE TAXI CASCADE CONSTRAINTS;
DROP TABLE AUTOBUS CASCADE CONSTRAINTS;
DROP TABLE AEROLINEA CASCADE CONSTRAINTS;
DROP TABLE INCIDENCIA CASCADE CONSTRAINTS;
DROP TABLE CLIENTE_VIP CASCADE CONSTRAINTS;
DROP TABLE VUELO CASCADE CONSTRAINTS;
DROP TABLE TELEFONO CASCADE CONSTRAINTS;
DROP TABLE TRABAJA_EN CASCADE CONSTRAINTS;

CREATE TABLE PERSONA
(
    DNI	    VARCHAR2(9) CONSTRAINT pk_persona PRIMARY KEY,
    NOMBRE	VARCHAR2(75) NOT NULL,
    DIRECCION	VARCHAR2(100) NOT NULL,
    CONSTRAINT valid_dni CHECK (REGEXP_LIKE(DNI, '[0-9]{8}[A-Z]')),
    CONSTRAINT valid_name CHECK (REGEXP_LIKE(NOMBRE, '[A-Z¡…Õ”⁄a-z·ÈÌÛ˙\s]+'))
);



CREATE TABLE TRANSPORTE
(
    IDTRANSPORTE VARCHAR2(6) CONSTRAINT pk_transporte PRIMARY KEY,
    COMPANIA VARCHAR2(10) NOT NULL
);


CREATE TABLE TAXI
(
    NUMLICENCIA VARCHAR2(6)CONSTRAINT pk_taxi PRIMARY KEY,
    IDTRANSPORTE_TAXI VARCHAR2(6) NOT NULL,
    CONSTRAINT tax_fk FOREIGN KEY (IDTRANSPORTE_TAXI) REFERENCES TRANSPORTE (IDTRANSPORTE) ON DELETE CASCADE
);


CREATE TABLE AUTOBUS
(
    MATRICULA VARCHAR2(7) CONSTRAINT pk_autobus PRIMARY KEY,
    LINEABUS VARCHAR2(3) NOT NULL,
    IDTRANSPORTE_AUTOBUS VARCHAR2(6) NOT NULL,
    CONSTRAINT autob_fk FOREIGN KEY (IDTRANSPORTE_AUTOBUS) REFERENCES TRANSPORTE (IDTRANSPORTE) ON DELETE CASCADE
);

CREATE TABLE CLIENTE
(
    NPASAPORTE VARCHAR2 (9) CONSTRAINT pasaporte_unique UNIQUE,
    DNI_CLIENTE VARCHAR2(9) CONSTRAINT pk_cliente PRIMARY KEY,
    IDTRANSPORTE_CLIENTE VARCHAR2(6) NOT NULL,
    CONSTRAINT fkcliente_idtransporte FOREIGN KEY (IDTRANSPORTE_CLIENTE) REFERENCES TRANSPORTE (IDTRANSPORTE),
    CONSTRAINT fkcliente_dni  FOREIGN KEY (DNI_CLIENTE) REFERENCES PERSONA (DNI) ON DELETE CASCADE
);

CREATE TABLE EMPLEADO
(
    NSS VARCHAR2 (13) CONSTRAINT unull_empleado UNIQUE NOT NULL,
    SUELDO NUMBER (5) NOT NULL,
    TURNO VARCHAR2 (11) NOT NULL,
    DNI_EMPLEADO VARCHAR2 (9) CONSTRAINT pk_empleado PRIMARY KEY,
    CONSTRAINT fkdni_empleado FOREIGN KEY (DNI_EMPLEADO) REFERENCES PERSONA (DNI) ON DELETE CASCADE
        
);

ALTER TABLE EMPLEADO ADD DNI_SUPERVISOR VARCHAR2 (9) REFERENCES EMPLEADO(DNI_EMPLEADO);


CREATE TABLE TRIPULANTE
(   
    HVUELO NUMBER(6) NOT NULL,
    DNI_TRIPULANTE VARCHAR2(9) CONSTRAINT pk_tripulante PRIMARY KEY,
    CONSTRAINT fkdni_tripulante FOREIGN KEY (DNI_TRIPULANTE) REFERENCES PERSONA(DNI) ON DELETE CASCADE
);




CREATE TABLE CABINAMANDO
(  
    NUMLICENCIA VARCHAR2 (10) CONSTRAINT numlicencia_unique_notnull UNIQUE NOT NULL,
    PUESTO VARCHAR2(8) NOT NULL,
    DNI_CABINAMANDO VARCHAR2(9) CONSTRAINT pk_cabinamando PRIMARY KEY,
    CONSTRAINT fk_cabinamando FOREIGN KEY (DNI_CABINAMANDO) REFERENCES TRIPULANTE (DNI_TRIPULANTE) ON DELETE CASCADE
);

CREATE TABLE CABINAPASAJERO
(
    CLASE VARCHAR2(15) NOT NULL,
    DNI_CABINAPASAJERO VARCHAR2(9) CONSTRAINT pk_cabinapasajero PRIMARY KEY,
    CONSTRAINT fk_cabinapasajero FOREIGN KEY (DNI_CABINAPASAJERO) REFERENCES TRIPULANTE (DNI_TRIPULANTE) ON DELETE CASCADE
    
);

CREATE TABLE AZAFATA 
(
    IMPVENTA NUMBER (4) NOT NULL,
    DNI_AZAFATA VARCHAR2(9)CONSTRAINT pk_azafata PRIMARY KEY,
    CONSTRAINT fk_azafata FOREIGN KEY (DNI_AZAFATA) REFERENCES CABINAPASAJERO (DNI_CABINAPASAJERO) ON DELETE CASCADE

);

CREATE TABLE SOBRECARGO 
(
    HSOBRECARGO NUMBER (6) NOT NULL,
    DNI_SOBRECARGO VARCHAR2(9) CONSTRAINT pk_sobrecargo PRIMARY KEY,
    CONSTRAINT fk_sobrecargo FOREIGN KEY (DNI_SOBRECARGO) REFERENCES CABINAPASAJERO (DNI_CABINAPASAJERO) ON DELETE CASCADE
);

CREATE TABLE PISTA
(
    NUMPISTA NUMBER(1) CONSTRAINT pk_pista PRIMARY KEY,
    CONSTRAINT valid_pista CHECK (NUMPISTA < 5),
    LONGITUD NUMBER(4) NOT NULL
);

CREATE TABLE AVION
(
    IDAVION VARCHAR2(6) CONSTRAINT pk_avion PRIMARY KEY,
    MODELO VARCHAR2(10) NOT NULL,
    CARGAMAX DECIMAL (5,2) NOT NULL,
    NUMPLAZAS NUMBER (3) NOT NULL,
    CONSTRAINT valid_idavion CHECK (REGEXP_LIKE(IDAVION, '^[A-Z]{2}[0-9]{4}$'))
);

CREATE TABLE RECORRIDO
(
    IDRECORRIDO VARCHAR2(10) CONSTRAINT pk_recorrido PRIMARY KEY,
    DESTINO VARCHAR2(4) NOT NULL,
    ORIGEN VARCHAR2(4) NOT NULL,
    CONSTRAINT valid_destino CHECK (REGEXP_LIKE (DESTINO, '^[A-Z]+$')),
    CONSTRAINT valid_origen CHECK (REGEXP_LIKE (ORIGEN, '^[A-Z]+$'))
);

CREATE TABLE PUERTAEMBARQUE
(
    CODPUERTA VARCHAR2(4) CONSTRAINT pk_puertaembarque PRIMARY KEY,
    TERMINAL VARCHAR2(2)  NOT NULL,
    CONSTRAINT valid_codpuerta CHECK (REGEXP_LIKE (CODPUERTA, '^[A-Z]{2}[0-9]{2}$'))
);

CREATE TABLE AEROLINEA
(
	IDAEROLINEA VARCHAR2(8) CONSTRAINT pk_aerolinea PRIMARY KEY,
	NOMBRE_AEROLINEA VARCHAR2(12) NOT NULL
);

CREATE TABLE VUELO
(
    IDVUELO VARCHAR2(6),
    IDAVION VARCHAR2(6) NOT NULL,
    IDRECORRIDO VARCHAR2(10) NOT NULL,
    FECHA DATE NOT NULL,
    NUMPISTA NUMBER(1) NOT NULL,
    CODPUERTA VARCHAR2(4) NOT NULL,
    IDAEROLINEA VARCHAR2(8) NOT NULL,
    CONSTRAINT unique_vuelo UNIQUE (IDAVION, IDRECORRIDO, FECHA),
    CONSTRAINT fkvuelo_pista FOREIGN KEY (NUMPISTA) REFERENCES PISTA ON DELETE SET NULL,
    CONSTRAINT fkvuelo_puerta FOREIGN KEY (CODPUERTA) REFERENCES PUERTAEMBARQUE ON DELETE SET NULL,
    CONSTRAINT fkvuelo_aerolinea FOREIGN KEY (IDAEROLINEA) REFERENCES AEROLINEA ON DELETE SET NULL,
    CONSTRAINT fkvuelo_avion FOREIGN KEY (IDAVION) REFERENCES AVION ON DELETE SET NULL,
    CONSTRAINT fkvuelo_recorrido FOREIGN KEY (IDRECORRIDO) REFERENCES RECORRIDO ON DELETE SET NULL,
    CONSTRAINT vuelp_pk PRIMARY KEY (IDVUELO)
);

CREATE TABLE TRABAJA_EN
(
    IDVUELO VARCHAR2(6),
    DNI_TRIPULANTE VARCHAR(9),
    CONSTRAINT pk_trabajaen PRIMARY KEY (IDVUELO, DNI_TRIPULANTE),
    CONSTRAINT fk_trabajeen FOREIGN KEY (IDVUELO) REFERENCES VUELO ON DELETE CASCADE,
    CONSTRAINT fk_trabaja_dni FOREIGN KEY (DNI_TRIPULANTE) REFERENCES TRIPULANTE ON DELETE CASCADE
);

CREATE TABLE BILLETE(
    IDBILLETE VARCHAR2 (15) CONSTRAINT rest_idbillete PRIMARY KEY,
    PRECIO DECIMAL(8,2) NOT NULL,
    CLASE VARCHAR2(15) NOT NULL,
    PLAZA VARCHAR2(3) NOT NULL,
    DNI_CLIENTE VARCHAR2(9) NOT NULL,	
    IDVUELO VARCHAR2(6) NOT NULL,

  CONSTRAINT fkbillete_cliente FOREIGN KEY (DNI_CLIENTE) REFERENCES CLIENTE ON DELETE CASCADE,
  CONSTRAINT fkbillete_vuelo FOREIGN KEY (IDVUELO) REFERENCES VUELO ON DELETE CASCADE
  
);

CREATE TABLE EQUIPAJE
(
    IDEQUIPAJE VARCHAR2(8) CONSTRAINT rest_idequipaje PRIMARY KEY,
    PESO DECIMAL(4,2) NOT NULL,
    DIMENSIONES VARCHAR2(11) NOT NULL,
    DNI_CLIENTE VARCHAR2(9) NOT NULL,	
    IDVUELO VARCHAR2(6) NOT NULL,
    CONSTRAINT valid_idequipaje CHECK (REGEXP_LIKE(IDEQUIPAJE, '^[A-Z0-9]{8}$')),
    CONSTRAINT valid_dimensiones CHECK (REGEXP_LIKE(DIMENSIONES, '[0-9]{1,3}x[0-9]{1,3}x[0-9]{1,3}')),
    CONSTRAINT dniequ_fk FOREIGN KEY (DNI_CLIENTE) REFERENCES CLIENTE ON DELETE CASCADE,
    CONSTRAINT eq_vuelo_fk FOREIGN KEY (IDVUELO) REFERENCES VUELO ON DELETE CASCADE
);

CREATE TABLE INCIDENCIA
(
	IDVUELO VARCHAR2(6),
    NUMINCIDENCIA NUMBER(3),
 	DESCRIPCION VARCHAR2(240) NOT NULL,
 	HORA VARCHAR2(5) NOT NULL,
    CONSTRAINT valid_hora CHECK (REGEXP_LIKE (HORA, '[0-9]{2}:[0-9]{2}')),
  	CONSTRAINT fkincidencia FOREIGN KEY (IDVUELO) REFERENCES VUELO ON DELETE CASCADE,
	CONSTRAINT pk_incidencia PRIMARY KEY (IDVUELO,NUMINCIDENCIA)
);

CREATE TABLE CLIENTE_VIP
(
 	DNI_CLIENTE_VIP VARCHAR2(9) CONSTRAINT dni_cliente_vip PRIMARY KEY,
	DESCUENTO DECIMAL(5,2) NOT NULL,
	CONSTRAINT fkclientevip_empleado FOREIGN KEY(DNI_CLIENTE_VIP) REFERENCES EMPLEADO(DNI_EMPLEADO) ON DELETE CASCADE,
    CONSTRAINT fkclientevip_cliente FOREIGN KEY (DNI_CLIENTE_VIP) REFERENCES CLIENTE(DNI_CLIENTE) ON DELETE CASCADE
);

CREATE TABLE TELEFONO
(
    DNI_CLIENTE VARCHAR2(9) CONSTRAINT unull_dni UNIQUE NOT NULL,
    TELEFONO NUMBER(9)  CONSTRAINT unull_telefono UNIQUE NOT NULL,
    CONSTRAINT fkdni_cliente FOREIGN KEY (DNI_CLIENTE) REFERENCES CLIENTE,
    CONSTRAINT pk_telefono PRIMARY KEY(DNI_CLIENTE,TELEFONO)
);

/*CREATE INDEX IDX_tripulantes ON TRABAJA_EN(IDVUELO);
CREATE INDEX IDX_datos_empleado ON EMPLEADO(TURNO);
CREATE INDEX IDX_aerolinea_vuelo ON VUELO(IDAEROLINEA);*/

/* Personas-Cliente */
INSERT INTO PERSONA(DNI, NOMBRE, DIRECCION) VALUES ('43194333Q','JosÈ Fern·ndez RodrÌguez', 'Ourense, R˙a Curros HenrÌquez, n∫ 34');
INSERT INTO PERSONA(DNI, NOMBRE,DIRECCION) VALUES ('53196633Q','Luisa RodrÌguez Morgado', 'Ourense, Taboadela, Calle A Charca, n∫ 17');
INSERT INTO PERSONA(DNI, NOMBRE,DIRECCION) VALUES ('53774333Q','Leonardo DomÌnguez Mar', 'A CoruÒa, R˙a MariÒamansa, n∫ 44');
INSERT INTO PERSONA(DNI, NOMBRE,DIRECCION) VALUES ('52294333Q','MarÌa RodrÌguez RodrÌguez', 'Pontevedra, Vigo, R˙a RosalÌa de Castro, n∫ 15');
INSERT INTO PERSONA(DNI, NOMBRE,DIRECCION) VALUES ('53194369V','Breixo LÛpez Robles', 'Pontevedra, MoaÒa, R˙a CarmeÒo, n∫ 2');
INSERT INTO PERSONA(DNI, NOMBRE,DIRECCION) VALUES ('53126443Q','Pablo Paredes Ferro','Ourense, Pontenoalla, R˙a CarballiÒo, n∫ 10');

/* Personas-empleado */
INSERT INTO PERSONA(DNI, NOMBRE,DIRECCION) VALUES ('66633666Q','Alfonso N˙Òez LÛpez','Pontevedra, R˙a Vilanova, n∫ 12');
INSERT INTO PERSONA(DNI, NOMBRE,DIRECCION) VALUES ('66666556T','Josefina Morales Varela','Pontevedra, R˙a Canle, n∫ 19');
INSERT INTO PERSONA(DNI, NOMBRE,DIRECCION) VALUES ('78966666T','Tamara Blanco Masid','A CoruÒa, R˙a MartÌnez, n∫ 81');


INSERT INTO TRANSPORTE (IDTRANSPORTE, COMPANIA) VALUES ('AZ3453', 'RENFE');
INSERT INTO TRANSPORTE (IDTRANSPORTE, COMPANIA) VALUES ('BX3113', 'OUIGO');
INSERT INTO TRANSPORTE (IDTRANSPORTE, COMPANIA) VALUES ('BC8953','ALSA');
INSERT INTO TRANSPORTE (IDTRANSPORTE, COMPANIA) VALUES ('BX3453','RENFE');
INSERT INTO TRANSPORTE (IDTRANSPORTE, COMPANIA) VALUES ( 'MI3453','ALSA');
INSERT INTO TRANSPORTE (IDTRANSPORTE, COMPANIA) VALUES ( 'NN3103', 'OUIGO');
INSERT INTO TRANSPORTE (IDTRANSPORTE, COMPANIA) VALUES ('BC8900','EUROBUS');

/*Personas-tripulante*/
INSERT INTO PERSONA(DNI, NOMBRE,DIRECCION) VALUES ('53324333Z', 'Francisco MartÌnez S·nchez','Ourense, R˙a Nova, n∫ 13');
INSERT INTO PERSONA(DNI, NOMBRE,DIRECCION) VALUES ('66666666K', 'Azucena Dolores Dolores','Madrid, R˙a Vallecas, n∫ 57');
INSERT INTO PERSONA(DNI, NOMBRE,DIRECCION) VALUES ('76666666M', 'Mario MartÌnez Fern·ndez', 'Madrid, R˙a Vallecas, n∫ 57');
INSERT INTO PERSONA(DNI, NOMBRE,DIRECCION) VALUES ('86666666G', 'Mario PÈrez Fern·ndez', 'Madrid, R˙a Vallecas, n∫ 58');
INSERT INTO PERSONA(DNI, NOMBRE,DIRECCION) VALUES ('96666666H', 'MarÌa Villanueva Fern·ndez', 'Madrid, R˙a Vallecas, n∫ 59');
INSERT INTO PERSONA(DNI, NOMBRE,DIRECCION) VALUES ('97666666L', 'Helena Herrera Fern·ndez', 'Madrid, R˙a Vallecas, n∫ 60');

INSERT INTO EMPLEADO (DNI_EMPLEADO,NSS,SUELDO,TURNO) VALUES ('53324333Z','ABEF222233337',1000,'DIA');
INSERT INTO EMPLEADO (DNI_EMPLEADO,NSS,SUELDO,TURNO) VALUES ('66666556T','NQCD222883337',1000,'DIA');
INSERT INTO EMPLEADO (DNI_EMPLEADO,NSS,SUELDO,TURNO) VALUES ('78966666T','STCD222299337',1100,'NOCHE');

INSERT INTO CLIENTE (DNI_CLIENTE, NPASAPORTE,IDTRANSPORTE_CLIENTE) VALUES ('43194333Q',333333222, 'AZ3453');
INSERT INTO CLIENTE (DNI_CLIENTE, NPASAPORTE,IDTRANSPORTE_CLIENTE) VALUES ('53196633Q',334456222, 'BX3113');
INSERT INTO CLIENTE (DNI_CLIENTE, NPASAPORTE,IDTRANSPORTE_CLIENTE) VALUES ('53774333Q',773333222, 'BC8953');
INSERT INTO CLIENTE (DNI_CLIENTE, NPASAPORTE,IDTRANSPORTE_CLIENTE) VALUES ('52294333Q',378333222, 'BX3453');
INSERT INTO CLIENTE (DNI_CLIENTE, NPASAPORTE,IDTRANSPORTE_CLIENTE) VALUES ('53194369V',333153222, 'MI3453');
INSERT INTO CLIENTE (DNI_CLIENTE, NPASAPORTE,IDTRANSPORTE_CLIENTE) VALUES ('53126443Q',334488222, 'NN3103');
INSERT INTO CLIENTE (DNI_CLIENTE, NPASAPORTE,IDTRANSPORTE_CLIENTE) VALUES ('53324333Z',773347222, 'BC8900');

INSERT INTO CLIENTE_VIP (DNI_CLIENTE_VIP, DESCUENTO) VALUES ('53324333Z', 10.01);

INSERT INTO TAXI (NUMLICENCIA, IDTRANSPORTE_TAXI) VALUES ('2343AZ','AZ3453');
INSERT INTO TAXI (NUMLICENCIA, IDTRANSPORTE_TAXI) VALUES ('1143BX','BX3113');
INSERT INTO TAXI (NUMLICENCIA, IDTRANSPORTE_TAXI) VALUES ('4578XX','BC8953');

INSERT INTO AUTOBUS (MATRICULA,LINEABUS,IDTRANSPORTE_AUTOBUS) VALUES ('4968JHK','29A','BX3453');
INSERT INTO AUTOBUS (MATRICULA,LINEABUS,IDTRANSPORTE_AUTOBUS) VALUES ('9643KLO','34F','MI3453');
INSERT INTO AUTOBUS (MATRICULA,LINEABUS,IDTRANSPORTE_AUTOBUS) VALUES ( '3267FDC','12C','NN3103');
INSERT INTO AUTOBUS (MATRICULA,LINEABUS,IDTRANSPORTE_AUTOBUS) VALUES ('3696GFC','25F','BC8900');

INSERT INTO TRIPULANTE(DNI_TRIPULANTE, HVUELO) VALUES ('66666666K','125');
INSERT INTO TRIPULANTE(DNI_TRIPULANTE, HVUELO) VALUES ('76666666M','156');
INSERT INTO TRIPULANTE(DNI_TRIPULANTE, HVUELO) VALUES ('86666666G','260');
INSERT INTO TRIPULANTE(DNI_TRIPULANTE, HVUELO) VALUES ('96666666H','690');
INSERT INTO TRIPULANTE(DNI_TRIPULANTE, HVUELO) VALUES ('97666666L', '690');

INSERT INTO CABINAMANDO(DNI_CABINAMANDO, NUMLICENCIA,PUESTO) VALUES ('66666666K', '2098128761','PILOTO');
INSERT INTO CABINAMANDO(DNI_CABINAMANDO, NUMLICENCIA,PUESTO) VALUES ('76666666M', '2093128761','COPILOTO');

INSERT INTO CABINAPASAJERO(DNI_CABINAPASAJERO, CLASE) VALUES ('86666666G', 'TURISTA');
INSERT INTO CABINAPASAJERO(DNI_CABINAPASAJERO, CLASE) VALUES ('96666666H', 'BUSINESS');

INSERT INTO AZAFATA(DNI_AZAFATA, IMPVENTA) VALUES ('86666666G', '58');

INSERT INTO SOBRECARGO(DNI_SOBRECARGO, HSOBRECARGO) VALUES ('96666666H', '32');

INSERT INTO PISTA(NUMPISTA,LONGITUD) VALUES(1,1000);
INSERT INTO PISTA(NUMPISTA,LONGITUD) VALUES(2,1200);
INSERT INTO PISTA(NUMPISTA,LONGITUD) VALUES(3,900);

INSERT INTO AVION(IDAVION,MODELO,CARGAMAX,NUMPLAZAS) VALUES('AX4555','A380',2.5,540);
INSERT INTO AVION(IDAVION,MODELO,CARGAMAX,NUMPLAZAS) VALUES('MN6655','747',1.7,300);
INSERT INTO AVION(IDAVION,MODELO,CARGAMAX,NUMPLAZAS) VALUES('PZ2333','CONCORD',2.1,250);

INSERT INTO RECORRIDO (IDRECORRIDO, DESTINO, ORIGEN) VALUES('2566663321','MAD','BAR');
INSERT INTO RECORRIDO (IDRECORRIDO, DESTINO, ORIGEN) VALUES('5666523147','SCQ','PAR');
INSERT INTO RECORRIDO (IDRECORRIDO, DESTINO, ORIGEN) VALUES('8956321458','NYC','LAX');

INSERT INTO PUERTAEMBARQUE(CODPUERTA,TERMINAL) VALUES('IK12','T4');
INSERT INTO PUERTAEMBARQUE(CODPUERTA,TERMINAL) VALUES('ZR95','T2');
INSERT INTO PUERTAEMBARQUE(CODPUERTA,TERMINAL) VALUES('PL23','T1');
INSERT INTO PUERTAEMBARQUE(CODPUERTA,TERMINAL) VALUES('NX12','T3');
INSERT INTO PUERTAEMBARQUE(CODPUERTA,TERMINAL) VALUES('IK13','T4');

INSERT INTO AEROLINEA (IDAEROLINEA, NOMBRE_AEROLINEA) VALUES('AEU','AIREUROPA');
INSERT INTO AEROLINEA (IDAEROLINEA, NOMBRE_AEROLINEA) VALUES('AFR','AIRFRANCE');
INSERT INTO AEROLINEA (IDAEROLINEA, NOMBRE_AEROLINEA) VALUES('ALITA','ALITALIA');
INSERT INTO AEROLINEA (IDAEROLINEA, NOMBRE_AEROLINEA) VALUES('EZY','EASYJET');

INSERT INTO VUELO(IDVUELO, IDAVION,IDRECORRIDO,FECHA,NUMPISTA,CODPUERTA,IDAEROLINEA) VALUES ('VUELO1', 'AX4555','2566663321', DATE '1999-03-04',2,'IK12','AEU');
INSERT INTO VUELO(IDVUELO,IDAVION,IDRECORRIDO,FECHA,NUMPISTA,CODPUERTA,IDAEROLINEA) VALUES ('VUELO2','MN6655','5666523147', DATE '1999-03-05',2,'PL23','AFR');
INSERT INTO VUELO(IDVUELO,IDAVION,IDRECORRIDO,FECHA,NUMPISTA,CODPUERTA,IDAEROLINEA) VALUES ('VUELO3','PZ2333','8956321458', DATE '1999-03-06',2,'IK13','ALITA');
INSERT INTO VUELO(IDVUELO,IDAVION,IDRECORRIDO,FECHA,NUMPISTA,CODPUERTA,IDAEROLINEA) VALUES ('VUELO4','AX4555','5666523147', DATE '1999-03-07',2,'IK12','AEU');


INSERT INTO EQUIPAJE (IDEQUIPAJE, PESO, DIMENSIONES, DNI_CLIENTE, IDVUELO) VALUES('AZC12345', 23.8,'25x65x66','52294333Q','VUELO1');
INSERT INTO EQUIPAJE (IDEQUIPAJE, PESO, DIMENSIONES, DNI_CLIENTE, IDVUELO) VALUES('SDF89631', 17.5,'22x44x66','53774333Q','VUELO1');
INSERT INTO EQUIPAJE (IDEQUIPAJE, PESO, DIMENSIONES, DNI_CLIENTE, IDVUELO) VALUES('25633FFF', 14.3,'99x88x44','53196633Q','VUELO2');
INSERT INTO EQUIPAJE (IDEQUIPAJE, PESO, DIMENSIONES, DNI_CLIENTE, IDVUELO) VALUES('56223FFF', 5.2,'32x65x33','43194333Q','VUELO3');

INSERT INTO INCIDENCIA (IDVUELO, NUMINCIDENCIA, DESCRIPCION, HORA) VALUES('VUELO1' ,231,'ha fallado el motor' ,'12:25' );
INSERT INTO INCIDENCIA (IDVUELO, NUMINCIDENCIA, DESCRIPCION, HORA) VALUES('VUELO3' ,896,'ha fallado el ala derecha' ,'02:35' );


INSERT INTO BILLETE(IDBILLETE, PRECIO, CLASE, PLAZA, DNI_CLIENTE, IDVUELO) VALUES ('ABCDE1234567890', 121.24, 'BUSINESS', '65C', '53324333Z','VUELO1'); 
INSERT INTO BILLETE(IDBILLETE, PRECIO, CLASE, PLAZA, DNI_CLIENTE, IDVUELO) VALUES ('ABCSE1234567890', 125.04, 'TURISTA', '60C', '43194333Q','VUELO3');
 
INSERT INTO BILLETE(IDBILLETE, PRECIO, CLASE, PLAZA, DNI_CLIENTE, IDVUELO) VALUES ('ABCDR1234567890', 75.77, 'TURISTA', '14A', '53774333Q','VUELO1'); 
INSERT INTO BILLETE(IDBILLETE, PRECIO, CLASE, PLAZA, DNI_CLIENTE, IDVUELO) VALUES ('ABCDE1234597890', 221.24, 'BUSINESS', '25C', '52294333Q','VUELO1'); 
INSERT INTO BILLETE(IDBILLETE, PRECIO, CLASE, PLAZA, DNI_CLIENTE, IDVUELO) VALUES ('ABCDE1232267890', 61.55, 'TURISTA', '14P', '53194369V','VUELO3'); 
INSERT INTO BILLETE(IDBILLETE, PRECIO, CLASE, PLAZA, DNI_CLIENTE, IDVUELO) VALUES ('AJKDE1234567890', 121.24, 'BUSINESS', '32B', '53126443Q','VUELO3'); 
INSERT INTO BILLETE(IDBILLETE, PRECIO, CLASE, PLAZA, DNI_CLIENTE, IDVUELO) VALUES ('ABCDE0534567890', 50.24, 'TURISTA', '05C', '53196633Q','VUELO4'); 

INSERT INTO TRABAJA_EN(IDVUELO, DNI_TRIPULANTE) VALUES ('VUELO1','76666666M');
INSERT INTO TRABAJA_EN(IDVUELO, DNI_TRIPULANTE) VALUES ('VUELO2','76666666M');
INSERT INTO TRABAJA_EN(IDVUELO, DNI_TRIPULANTE) VALUES ('VUELO3','76666666M');
INSERT INTO TRABAJA_EN(IDVUELO, DNI_TRIPULANTE) VALUES ('VUELO4','76666666M');

INSERT INTO TRABAJA_EN(IDVUELO, DNI_TRIPULANTE) VALUES ('VUELO2', '66666666K');
INSERT INTO TRABAJA_EN(IDVUELO, DNI_TRIPULANTE) VALUES ('VUELO1', '66666666K');
INSERT INTO TRABAJA_EN(IDVUELO, DNI_TRIPULANTE) VALUES ('VUELO3', '66666666K');
INSERT INTO TRABAJA_EN(IDVUELO, DNI_TRIPULANTE) VALUES ('VUELO4', '66666666K');

INSERT INTO TRABAJA_EN(IDVUELO, DNI_TRIPULANTE) VALUES ('VUELO2', '96666666H');
INSERT INTO TRABAJA_EN(IDVUELO, DNI_TRIPULANTE) VALUES ('VUELO1', '96666666H');
INSERT INTO TRABAJA_EN(IDVUELO, DNI_TRIPULANTE) VALUES ('VUELO3', '96666666H');
INSERT INTO TRABAJA_EN(IDVUELO, DNI_TRIPULANTE) VALUES ('VUELO4', '96666666H');

INSERT INTO TRABAJA_EN(IDVUELO, DNI_TRIPULANTE) VALUES ('VUELO2', '86666666G');
INSERT INTO TRABAJA_EN(IDVUELO, DNI_TRIPULANTE) VALUES ('VUELO1', '86666666G');
INSERT INTO TRABAJA_EN(IDVUELO, DNI_TRIPULANTE) VALUES ('VUELO3', '86666666G');
INSERT INTO TRABAJA_EN(IDVUELO, DNI_TRIPULANTE) VALUES ('VUELO4', '86666666G');

INSERT INTO TRABAJA_EN(IDVUELO, DNI_TRIPULANTE) VALUES ('VUELO2', '97666666L');
INSERT INTO TRABAJA_EN(IDVUELO, DNI_TRIPULANTE) VALUES ('VUELO1', '97666666L');
INSERT INTO TRABAJA_EN(IDVUELO, DNI_TRIPULANTE) VALUES ('VUELO3', '97666666L');
INSERT INTO TRABAJA_EN(IDVUELO, DNI_TRIPULANTE) VALUES ('VUELO4', '97666666L');


/*VISTAS*/

/*VISTA ACTUALIZABLE*/
CREATE OR REPLACE VIEW INFO_TRIPULANTES AS
    SELECT
        PERSONA.DNI,
        PERSONA.NOMBRE,
        PERSONA.DIRECCION,
        TRIPULANTE.HVUELO
    FROM
        PERSONA,
        TRIPULANTE
    WHERE
        PERSONA.DNI = TRIPULANTE.DNI_TRIPULANTE;

/*VISTA ACTUALIZABLE*/
CREATE OR REPLACE VIEW VUELOS_AEU AS
    SELECT
        IDVUELO,
        FECHA,
        IDAVION,
        IDRECORRIDO
    FROM
        VUELO
    WHERE IDAEROLINEA='AEU';
        

/*VISTA NO ACTUALIZABLE*/
CREATE OR REPLACE VIEW PASAJEROS_VUELO AS
    SELECT
        VUELO.IDVUELO AS VUELO,
        COUNT(BILLETE.IDBILLETE) AS NUM_BILLETES
    FROM
        VUELO,
        BILLETE
    WHERE
        VUELO.IDVUELO=BILLETE.IDVUELO
    GROUP BY VUELO.IDVUELO;

/*VISTA ACTUALIZABLE*/
CREATE OR REPLACE VIEW EMPLEADOS_DIA AS
    SELECT
        PERSONA.NOMBRE,
        EMPLEADO.DNI_EMPLEADO
    FROM
        PERSONA,
        EMPLEADO
    WHERE
        EMPLEADO.TURNO='DIA' AND
        EMPLEADO.DNI_EMPLEADO=PERSONA.DNI;

/*CONSULTAS */

SELECT
    persona.nombre,
    billete.idbillete,
    billete.idvuelo,
    equipaje.idequipaje,
    vuelo.fecha
FROM
    persona,
    billete,
    vuelo,
    equipaje
WHERE
    persona.dni = billete.dni_cliente
    AND vuelo.idvuelo = billete.idvuelo
    AND equipaje.dni_cliente = persona.dni;

SELECT
    vuelo.idaerolinea,
    COUNT(idrecorrido) AS num_vuelos
FROM
    vuelo,
    aerolinea
WHERE
    vuelo.idaerolinea = aerolinea.idaerolinea
GROUP BY
    vuelo.idaerolinea;

/*Comprobar vistas*/
SELECT * FROM PASAJEROS_VUELO;
SELECT * FROM VUELOS_AEU;
SELECT * FROM EMPLEADOS_DIA;
SELECT * FROM INFO_TRIPULANTES;

/*COMPROBAR SI LAS VISTAS SON ACTUALIZABLES*/
UPDATE VUELOS_AEU SET FECHA=DATE '1998-01-05' WHERE IDVUELO='VUELO1';

SELECT * FROM VUELOS_AEU;

UPDATE INFO_TRIPULANTES SET NOMBRE='Paco Dolores Dolores' WHERE DNI='66666666K';

SELECT * FROM INFO_TRIPULANTES;

/*PROCEDIMIENTOS y FUNCIONES*/

CREATE OR REPLACE PROCEDURE imprimeTripulantes (fecha_inicio IN VUELO.FECHA%TYPE, fecha_fin IN VUELO.FECHA%TYPE)
IS
    regTripul TRIPULANTE%ROWTYPE;
    
    E_TIEMPO_NO_VALIDO EXCEPTION;
    PRAGMA EXCEPTION_INIT(E_TIEMPO_NO_VALIDO, -10900);
    
    CURSOR C_TRIPULANTE IS
        SELECT DISTINCT NOMBRE FROM PERSONA,TRIPULANTE,VUELO, TRABAJA_EN 
        WHERE PERSONA.DNI=TRIPULANTE.DNI_TRIPULANTE 
        AND TRIPULANTE.DNI_TRIPULANTE=TRABAJA_EN.DNI_TRIPULANTE
        AND TRABAJA_EN.IDVUELO=VUELO.IDVUELO
        AND VUELO.FECHA >= fecha_inicio AND VUELO.FECHA <= fecha_fin;
        

BEGIN
  
  IF fecha_inicio > fecha_fin THEN
    RAISE E_TIEMPO_NO_VALIDO;
  ELSE 
    DBMS_OUTPUT.PUT_LINE('Las siguientes personas fueron tripulantes entre: '|| fecha_inicio || ' y '|| fecha_fin);
    FOR regTripul IN C_TRIPULANTE LOOP
        DBMS_OUTPUT.PUT_LINE(regTripul.NOMBRE);
    END LOOP;
  
  END IF;
END imprimeTripulantes;
/


CREATE OR REPLACE PROCEDURE crearEmpleado (dnin IN PERSONA.DNI%TYPE, nombre IN PERSONA.NOMBRE%TYPE, direccion IN PERSONA.DIRECCION%TYPE, nss IN EMPLEADO.NSS%TYPE, sueldo IN EMPLEADO.SUELDO%TYPE, turno IN EMPLEADO.TURNO%TYPE)
IS
    pers PERSONA%ROWTYPE;
    emp EMPLEADO%ROWTYPE;
    
    E_EMPLEADO_EXISTE EXCEPTION;
    
    PRAGMA EXCEPTION_INIT(E_EMPLEADO_EXISTE, -10100);

    CURSOR C_PERS IS
        SELECT * FROM PERSONA WHERE PERSONA.DNI LIKE dnin;
    CURSOR C_EMPL IS
        SELECT * FROM EMPLEADO WHERE EMPLEADO.DNI_EMPLEADO=dnin;
BEGIN

    OPEN C_EMPL;
    OPEN C_PERS;
 
    FETCH C_EMPL INTO emp;
    FETCH C_PERS INTO pers;
    
    IF C_EMPL%FOUND THEN
        RAISE E_EMPLEADO_EXISTE;
    ELSIF C_PERS%NOTFOUND THEN
        INSERT INTO PERSONA(DNI, NOMBRE, DIRECCION) VALUES (dnin, nombre, direccion);
    END IF;
        
    INSERT INTO EMPLEADO (DNI_EMPLEADO,NSS,SUELDO,TURNO) VALUES (dnin, nss, sueldo, turno);
    
    CLOSE C_EMPL; 
    CLOSE C_PERS;
    
END crearEmpleado;
/

CREATE OR REPLACE PROCEDURE cambiarVuelosPista (pistaInicial IN VUELO.NUMPISTA%TYPE, pistaFinal IN VUELO.NUMPISTA%TYPE)
IS
    
    regVuelo VUELO%ROWTYPE;
    
    CURSOR C_VUELO IS
        SELECT * FROM VUELO WHERE NUMPISTA=pistaInicial
        FOR UPDATE;
BEGIN

    FOR regVuelo IN C_VUELO LOOP
        DBMS_OUTPUT.PUT_LINE('El vuelo ' || regVuelo.IDVUELO || ' se cambia a la pista ' || pistaFinal);
        UPDATE VUELO SET NUMPISTA = pistaFinal WHERE CURRENT OF C_VUELO;
    END LOOP;
    
END cambiarVuelosPista;
/

CREATE OR REPLACE PROCEDURE crearvuelo (
    idvuelon      IN vuelo.idvuelo%TYPE,
    idavionn      IN vuelo.idavion%TYPE,
    idrecorridon   IN vuelo.idrecorrido%TYPE,
    fechan         IN vuelo.fecha%TYPE,
    numpistan     IN vuelo.numpista%TYPE,
    codpuertan     IN vuelo.codpuerta%TYPE,
    idaeron        IN vuelo.idaerolinea%TYPE
) IS

    vueloC vuelo%rowtype;
    recorridoC recorrido%rowtype;
    avionC avion%rowtype;
    pistaC pista%rowtype;
    puertaC puertaembarque%rowtype;
    aeroC aerolinea%rowtype;

    E_VUELO_EXISTE EXCEPTION;
    e_avion_no_existe EXCEPTION;
    e_aero_no_existe EXCEPTION;
    e_recorrido_no_existe EXCEPTION;
	e_puerta_no_existe EXCEPTION;
	e_pista_no_existe EXCEPTION;
    
    PRAGMA EXCEPTION_INIT(E_VUELO_EXISTE, -10200);
    PRAGMA EXCEPTION_INIT(e_avion_no_existe, -10300);
    PRAGMA EXCEPTION_INIT(e_aero_no_existe, -10400);
    PRAGMA EXCEPTION_INIT(e_recorrido_no_existe, -10500);
    PRAGMA EXCEPTION_INIT(e_puerta_no_existe, -10600);
    PRAGMA EXCEPTION_INIT(e_pista_no_existe, -10700);

    CURSOR c_vuelo IS SELECT * FROM vuelo WHERE vuelo.idvuelo LIKE idvuelon;
    CURSOR c_recorrido IS SELECT * FROM recorrido WHERE recorrido.idrecorrido LIKE idrecorridon;
    CURSOR c_avion IS SELECT * FROM avion WHERE avion.idavion LIKE idavionn;
    CURSOR c_pista IS SELECT * FROM pista WHERE pista.numPista LIKE numpistan;
    CURSOR c_puerta IS SELECT * FROM puertaembarque WHERE puertaembarque.codpuerta LIKE codpuertan;
    CURSOR c_aero IS SELECT * FROM aerolinea WHERE aerolinea.idaerolinea LIKE idaeron;

BEGIN
    
    OPEN c_recorrido;
    FETCH c_recorrido INTO recorridoC;
    IF c_recorrido%notfound
        THEN
    RAISE e_recorrido_no_existe;
    END IF;
    CLOSE c_recorrido;
    
    OPEN c_avion;
    FETCH c_avion INTO avionC;
    IF c_avion%notfound
        THEN
    RAISE e_avion_no_existe;
    END IF;
    CLOSE c_avion;
    
    OPEN c_pista;
    FETCH c_pista INTO pistaC;
    IF c_pista%notfound
        THEN
    RAISE e_pista_no_existe;
    END IF;
    CLOSE c_pista;
    
    OPEN c_puerta;
    FETCH c_puerta INTO puertaC;
    IF c_puerta%notfound
        THEN
    RAISE e_puerta_no_existe;
    END IF;
    CLOSE c_puerta;
    
    OPEN c_aero;
    FETCH c_aero INTO aeroC;
    IF c_aero%notfound
        THEN
    RAISE e_aero_no_existe;
    END IF;
    CLOSE c_aero;
    
        OPEN c_vuelo;
        FETCH c_vuelo INTO vueloC;
        IF c_vuelo%found
            
        THEN
            RAISE E_VUELO_EXISTE;
        ELSE
            INSERT INTO vuelo (
                idvuelo,
                idavion,
                idrecorrido,
                fecha,
                numpista,
                codpuerta,
                idaerolinea) 
		VALUES (
                idvuelon,
                idavionn,
                idrecorridon,
                fechan,
                numpistan,
                codpuertan,
                idaeron);
        END IF;
    
        CLOSE c_vuelo;
   
END crearvuelo;
/

CREATE OR REPLACE FUNCTION numIncidencias(idvuelon IN vuelo.idvuelo%TYPE)
	RETURN NUMBER
IS
	numIncidencias NUMBER;
    vueloC vuelo%rowtype;
  
    E_VUELO_NO_EXISTE EXCEPTION;
    PRAGMA EXCEPTION_INIT(E_VUELO_NO_EXISTE, -10800);
    
    CURSOR c_vuelo IS SELECT * FROM vuelo WHERE vuelo.idvuelo LIKE idvuelon;
BEGIN
        OPEN c_vuelo;
        FETCH c_vuelo INTO vueloC;
        IF c_vuelo%notfound
        THEN
            RAISE E_VUELO_NO_EXISTE;
		END IF;
		CLOSE c_vuelo;
		SELECT COUNT(*) INTO numIncidencias FROM INCIDENCIA WHERE INCIDENCIA.idvuelo LIKE idvuelon;
		RETURN numIncidencias;

   

END numIncidencias;
/



CREATE OR REPLACE FUNCTION validadni (
	dni   IN persona.dni%TYPE
) RETURN BOOLEAN AS
	letras      	CHAR(23) := 'TRWAGMYFPDXBNJZSQVHLCKE';
	letracorrecta   CHAR(1);
	dni_sinletra	INTEGER;
BEGIN
	dni_sinletra := substr(dni,0,8);
	letracorrecta := substr(letras, (dni_sinletra MOD 23) + 1,1);
	IF
    	( letracorrecta = upper(substr(dni,9,1) ) )
	THEN
    	RETURN true;
	ELSE
    	RETURN false;
	END IF;

END validadni;
/

/*USAR PROCEDIMIENTOS*/

set serveroutput on;

--Procedimiento IMPRIMETRIPULANTES
DECLARE
    fechamin VUELO.FECHA%TYPE;
    fechamax VUELO.FECHA%TYPE;
    
    E_TIEMPO_NO_VALIDO EXCEPTION;
    PRAGMA EXCEPTION_INIT(E_TIEMPO_NO_VALIDO, -10900);
    
BEGIN
    fechamin := DATE '1999-03-4';
    fechamax := DATE '1999-03-6';
    dbms_output.put_line('-------------------------------->imprimeTripulantes<---------------------------------');
    imprimeTripulantes(fechamin,fechamax);
   EXCEPTION
    WHEN E_TIEMPO_NO_VALIDO THEN
        DBMS_OUTPUT.PUT_LINE('Intervalo de tiempo no v·lido!');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error inesperado');
END;
/

--FunciÛn NUMINCIDENCIAS
DECLARE
    idvuelo vuelo.idvuelo%TYPE;
    num NUMBER;
    E_VUELO_NO_EXISTE EXCEPTION;
    PRAGMA EXCEPTION_INIT(E_VUELO_NO_EXISTE, -10800);
BEGIN
    idvuelo := 'VUELO6';
    dbms_output.put_line('-------------------------------->numIncidencias<---------------------------------');
    dbms_output.put_line('El numero de incidencias es: ' || numIncidencias(idvuelo));
EXCEPTION
    WHEN E_VUELO_NO_EXISTE THEN
        dbms_output.put_line('El vuelo no existe');
    WHEN OTHERS THEN
        dbms_output.put_line('Error inesperado al calcular el numero de incidencias');
END;
/

--Procedimiento CREAREMPLEADO
DECLARE

    dni PERSONA.DNI%TYPE;
    nombre PERSONA.NOMBRE%TYPE;
    direccion PERSONA.DIRECCION%TYPE;
    nss EMPLEADO.NSS%TYPE;
    sueldo EMPLEADO.SUELDO%TYPE;
    turno EMPLEADO.TURNO%TYPE;
    
    E_EMPLEADO_EXISTE EXCEPTION;
    
    PRAGMA EXCEPTION_INIT(E_EMPLEADO_EXISTE, -10100);
    
BEGIN
    dni := '44662548K';
    nombre := 'Paco';
    direccion := 'Ourense, Rua Nova, n∫ 10';
    nss := 'GTHD222233337';
    sueldo := '1200';
    turno := 'DIA';
    
    dbms_output.put_line('-------------------------------->crearEmpleado<---------------------------------');
    crearEmpleado(dni, nombre, direccion, nss, sueldo, turno);
    
EXCEPTION
    WHEN E_EMPLEADO_EXISTE THEN
        DBMS_OUTPUT.PUT_LINE('El empleado ya existe');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error inesperado');
END;
/

DECLARE
    dniComprobar PERSONA.DNI%TYPE;
BEGIN
    
    dbms_output.put_line('-------------------------------->validadni<---------------------------------');
    
    dniComprobar := '446625p8P';
    IF validadni(dniComprobar) THEN
        DBMS_OUTPUT.PUT_LINE('DNI BIEN');
    ELSE
        DBMS_OUTPUT.PUT_LINE('DNI MAL');
    END IF;

EXCEPTION
	WHEN value_error THEN
    	dbms_output.put_line('El dni introducido no tiene el formato correcto, 8 digitos + letra');
	WHEN OTHERS THEN
    	dbms_output.put_line('CÛdigo: ' || sqlcode);
    	dbms_output.put_line('[Mensaje]:'
                           	|| substr(sqlerrm,11,100) );
END;
/

DECLARE
    pistaInicial VUELO.NUMPISTA%TYPE;
    pistaFinal VUELO.NUMPISTA%TYPE;
BEGIN
    dbms_output.put_line('-------------------------------->cambiarVuelosPista<---------------------------------');
    cambiarVuelosPista(2,3);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No hay ning˙n vuelo en la pista '||pistaInicial);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error inesperado');
END;
/

DECLARE
    idvuelo       vuelo.idvuelo%TYPE;
    idavion       vuelo.idavion%TYPE;
    idrecorrido   vuelo.idrecorrido%TYPE;
    fecha         vuelo.fecha%TYPE;
    numpista      vuelo.numpista%TYPE;
    codpuerta     vuelo.codpuerta%TYPE;
    idaero        vuelo.idaerolinea%TYPE;
    
    E_VUELO_EXISTE EXCEPTION;
    e_avion_no_existe EXCEPTION;
    e_aero_no_existe EXCEPTION;
    e_recorrido_no_existe EXCEPTION;
	e_puerta_no_existe EXCEPTION;
	e_pista_no_existe EXCEPTION;
    
    PRAGMA EXCEPTION_INIT(E_VUELO_EXISTE, -10200);
    PRAGMA EXCEPTION_INIT(e_avion_no_existe, -10300);
    PRAGMA EXCEPTION_INIT(e_aero_no_existe, -10400);
    PRAGMA EXCEPTION_INIT(e_recorrido_no_existe, -10500);
    PRAGMA EXCEPTION_INIT(e_puerta_no_existe, -10600);
    PRAGMA EXCEPTION_INIT(e_pista_no_existe, -10700);
BEGIN
    idvuelo := 'VUELO5';
    idavion := 'AX4555';
    idrecorrido := '5666523147';
    fecha := '11/05/95';
    numpista := '2';
    codpuerta := 'PL23';
    idaero := 'AEU';
    dbms_output.put_line('-------------------------------->crearVuelo<---------------------------------');
    crearvuelo(idvuelo,idavion,idrecorrido,fecha,numpista,codpuerta,idaero);
EXCEPTION
    WHEN E_VUELO_EXISTE THEN
        dbms_output.put_line('El vuelo ya existe');
    WHEN e_avion_no_existe THEN
        dbms_output.put_line('El avion no existe');
    WHEN e_aero_no_existe THEN
        dbms_output.put_line('La aerolinea no existe');
    WHEN e_recorrido_no_existe THEN
        dbms_output.put_line('El recorrido no existe');
    WHEN e_pista_no_existe THEN
        dbms_output.put_line('La pista no existe');
    WHEN e_puerta_no_existe THEN
        dbms_output.put_line('La puerta no existe');
    WHEN OTHERS THEN
        dbms_output.put_line('Error inesperado al insertar vuelo');
END;
/

/*TRIGGERS*/

CREATE OR REPLACE TRIGGER overbooking
FOR INSERT ON BILLETE

COMPOUND TRIGGER
   num_billetes INT;
   num_plazas INT;


 BEFORE EACH ROW IS
 BEGIN

          SELECT COUNT(*) INTO num_billetes
          FROM BILLETE
          WHERE :NEW.idvuelo=Billete.idvuelo;
        
          SELECT numplazas into num_plazas
          FROM AVION,VUELO
          WHERE :NEW.idvuelo=VUELO.idvuelo AND VUELO.idavion=AVION.idavion;
 END BEFORE EACH ROW;
 
 AFTER EACH ROW IS
  BEGIN
     IF(num_billetes+1 > 1.1* num_plazas) THEN
        Raise_Application_Error(-20150,'Se supera el overbooking admitido');
      END IF;
 END AFTER EACH ROW;
 END overbooking;
 /


CREATE OR REPLACE TRIGGER comprobarDni
	BEFORE INSERT ON PERSONA
	FOR EACH ROW
   	 
BEGIN
	IF (validadni(:NEW.DNI) = false) THEN
    	RAISE_APPLICATION_ERROR(-20110, 'El DNI introducido no es v·lido');
	END IF;
END comprobarDni;
/

-- Trigger que se activa al insertar un billete. Si el cliente asociado es vip, le aplica el descuento.
CREATE OR REPLACE TRIGGER aplicarDescuento
BEFORE INSERT ON BILLETE
FOR EACH ROW
DECLARE
    esVip INT;
    descon DECIMAL(5,4);
    precion BILLETE.PRECIO%TYPE;
    dnicli BILLETE.DNI_CLIENTE%TYPE;
BEGIN
    SELECT COUNT(*) INTO esVip FROM CLIENTE_VIP WHERE DNI_CLIENTE_VIP=:NEW.DNI_CLIENTE;
    IF esVip=1 THEN
        dnicli := :NEW.DNI_CLIENTE;
        SELECT DESCUENTO/100 INTO descon FROM CLIENTE_VIP WHERE DNI_CLIENTE_VIP=:NEW.DNI_CLIENTE;
        :NEW.PRECIO := :NEW.PRECIO * (1-descon);
    END IF;
END aplicarDescuento;
/  
            
-- Cada vez que se inserta una maleta, comprueba que non se supere la carga m·xima del aviÛn.
CREATE OR REPLACE TRIGGER comprobarCarga
    BEFORE INSERT ON EQUIPAJE
    FOR EACH ROW
    DECLARE
        cargaTotal INT;
        cargaMax INT;
    BEGIN
        SELECT SUM(PESO) INTO cargaTotal FROM EQUIPAJE WHERE :NEW.IDVUELO=IDVUELO;
        SELECT AVION.CARGAMAX * 1000 INTO cargaMax FROM AVION, VUELO WHERE VUELO.IDVUELO=:NEW.IDVUELO AND AVION.IDAVION=VUELO.IDAVION;
        cargaTotal := cargaTotal+:NEW.PESO;
        IF cargaTotal > cargaMax THEN
            Raise_Application_Error(-20255, 'Carga m·xima superada');
        END IF;
END comprobarCarga;
/

/*BLOQUES DE PRUEBA DE LOS TRIGGERS*/

-- Insert de prueba de un billete de un cliente vip     
INSERT INTO BILLETE(IDBILLETE, PRECIO, CLASE, PLAZA, DNI_CLIENTE, IDVUELO) VALUES ('ABC7E1234565890', 121.24, 'BUSINESS', '65C', '53324333Z','VUELO1');
-- Insert de prueba de un billete de un cliente normal
INSERT INTO BILLETE(IDBILLETE, PRECIO, CLASE, PLAZA, DNI_CLIENTE, IDVUELO) VALUES ('ABF7E1234565890', 121.24, 'BUSINESS', '65C', '53196633Q','VUELO1');
-- Billete del cliente vip
SELECT * FROM BILLETE WHERE IDBILLETE = 'ABC7E1234565890';
-- Billete del cliente normal
SELECT * FROM BILLETE WHERE IDBILLETE = 'ABF7E1234565890';

--Bloque de prueba de COMPROBARDNI
DECLARE
    dniNoValido EXCEPTION;
    PRAGMA EXCEPTION_INIT(dniNoValido, -20110);
BEGIN
    --Insert de un DNI v·lido
    INSERT INTO PERSONA(DNI, NOMBRE,DIRECCION) VALUES ('00000000T', 'Paco Paco Paco','Ourense, R˙a Nova, n∫ 13');
    --Insert de un DNI no v·lido
    INSERT INTO PERSONA(DNI, NOMBRE,DIRECCION) VALUES ('45234567G', 'Francisco MartÌnez S·nchez','Ourense, R˙a Nova, n∫ 13');
EXCEPTION
    WHEN dniNoValido THEN
        DBMS_OUTPUT.PUT_LINE('El DNI introducido no es v·lido');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error inesperado al insertar');
END;
/

-- Bloque de prueba para OVERBOOKING
DECLARE
    idb INT;
    idBil VARCHAR(15);
    demasiados_billetes EXCEPTION;
    PRAGMA EXCEPTION_INIT(demasiados_billetes, -20150);
 
BEGIN
     DELETE FROM BILLETE WHERE IDVUELO='VUELO3';
     UPDATE AVION SET NUMPLAZAS=30 WHERE IDAVION='PZ2333';
    
     FOR idb IN 10..59 LOOP
        idBil := 'ABCDR12345678' || idb;
        INSERT INTO BILLETE (IDBILLETE, PRECIO, CLASE, PLAZA, DNI_CLIENTE, IDVUELO) VALUES(idBil,75.77, 'TURISTA', idb ||'A', '53774333Q','VUELO3');
    END LOOP;
    
EXCEPTION
    WHEN demasiados_billetes THEN
        dbms_output.put_line('SE SUPERA EL OVERBOOKING');
    WHEN OTHERS THEN
        dbms_output.put_line(SQLCODE);
        dbms_output.put_line('Error inesperado al insertar billete');
END;
/

-- Bloque de prueba para COMPROBARCARGA
DECLARE
    ie INT;
    idEq VARCHAR(8);
     exceso_carga EXCEPTION;
    PRAGMA EXCEPTION_INIT(exceso_carga, -20255);
BEGIN
    DELETE FROM EQUIPAJE WHERE IDVUELO='VUELO1';
    FOR ie IN 10..59 LOOP
        idEq := 'AZ0000' || ie;
        INSERT INTO EQUIPAJE (IDEQUIPAJE, PESO, DIMENSIONES, DNI_CLIENTE, IDVUELO) VALUES('AZ0000' || ie, 50.0,'25x65x66','52294333Q','VUELO1');
    END LOOP;
    
    INSERT INTO EQUIPAJE (IDEQUIPAJE, PESO, DIMENSIONES, DNI_CLIENTE, IDVUELO) VALUES('AZ000000', 50.0,'25x65x66','52294333Q','VUELO1');
    
EXCEPTION
    WHEN exceso_carga THEN
    dbms_output.put_line('SE SUPERA LA CARGA MAXIMA');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SUBSTR(SQLERRM, 11, 100));
END;
/


